write me below java code with correct logging so that i get to see everything happening. Dont over flood the log file, put debug and info logs as needed but info should give me almost all info
lets say if i have a proto object which can have string fields boolean fields DoubleValue fields and other nested proto objects inside it or any other possible proto fields.
lets say i have 2 proto objects of this same proto schema. I want you to write a very efficient and generic and concise code using java17 which can automatically compare these 2 proto objects and generate me a csv report for all the mismatch fields
the comparision should happen for every field inside the proto schema between 2 objects. you can use reflections to find out all the available fields in the proto schema and compare each of them between those 2 objects. write a base interface like a CompareService and i should be able to implement this class to do the same comparision for different proto schemas, i mean i have almost like 12 proto schema and i have 2 sources of same messages for all these schemas, i am trying to compare and make sure my 2 sources have exact same data, so you should write the Base CompareService interface and use default methods to have common methods like extracting fields doing comparision in generic way and also use Generic and other java concepts where ever it is needed. the final output csv should be a flattened structure. Like lets say my proto schema has 10 fields and 3 fields amoung them are not matching, the csv file should contain 3 rows representing the field name, source1 value source2 value and primarykey.
now this primary key should also be a abstract method in the COmpareService interface so that every proto schema can define its own primary key.
write this code in a streaming way so that my sources will keep pushing data to some queue and u have like 2 queues and you would know what is the primary key for that proto schema and you would have an item from both the queues as soon as same primary key items appear in both the queues.
it is also possible that there might be items present in source1 that might be absent in source2. Always consider source1 as the golden copy to which source2 has to match. Call source1 as PriceCache and source2 as ApiResponseObject.
if any row is present in Pricecahe but not present in ApiResponseObject, that should also be written to the csv file. may be add like a difference type Enum and every row in the csv file should have the differenceTypeEnum and in the row missing case it will have something like MISSING_ROW
the output csv report should also be generated in streaming mode. May be created a report Service which will have a queue to which all the compare services will keep pushing the differences and the reportService will keep writing data to the csv file as in when it receives and closes the file on application exit.
also expose some methods on the CompareService interface by which i should be able to customize any particular field comparision logic. Lets say i have DoubleValue field in a proto class, and if i only want to compare till 3 decimal points for one DoubleValue field, but for another doubleValue field i want it to be 5 decimal points i should be able to customize any field that i want have like a default 5 decimal point comparision for all DoubleValue but it should be overridable by any service class
There should be seperate csv file created for every proto schema and all of them should run in parallel.
take any 2 proto class schema as example and give me e2e code how this will run. Give me class with main method which i can just take and run directly. Put all possible datatypes in this proto schema example you are taking
Also expose some methods on CompareService so that the subclasses can you multiple fields which they want to exclude from comparision. This should be generic enof and any type of subclass should be able to give any field at any depth and the comparator should just ignore comparing that field.
show me response with a sample example implementation. Every response you provide for this project should be containing a main method and should be runnable directly with a sample class implementation
make this a batch application, when there are no more data coming to compareService queue any queue if no new messages for 60 secs, write all the compare reports for missing and value mismatch and end the spring batch application
give me full solution code

Create files and folders as needed under src/main/java and structure the code in packages and follow all the best principles
Also update Readme in a nice and precise manner. Put all the details so that any new person looking at this can understand and run the project easily
